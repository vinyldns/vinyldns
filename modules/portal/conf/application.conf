# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
#
# This must be changed for production, but we recommend not changing it in this file.
#
# See http://www.playframework.com/documentation/latest/ApplicationSecret for more details.
play.http.secret.key = "changeme"

# The application languages
# ~~~~~
play.i18n.langs = [ "en" ]

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# play.http.router = my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.username=sa
# db.default.password=""

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# play.evolutions.enabled=false

# You can disable evolutions for a specific datasource if necessary
# play.evolutions.db.default.enabled=false

portal.dynamo_delay = 1100
portal.vinyldns.backend.url = "http://localhost:9000"
portal.test_login = true

data-stores = ["dynamodb"]

dynamodb {
  class-name = "vinyldns.dynamodb.repository.DynamoDBDataStoreProvider"

  settings {
    key = "akid goes here"
    secret = "secret key goes here"
    endpoint = "http://127.0.0.1:19000"
    region = "us-east-1" # note: we are always in us-east-1, but this can be overridden
  }

  repositories {
    user {
      table-name = "usersTest"
      provisioned-reads = 30
      provisioned-writes = 20
    }
    user-change {
      table-name = "userChangeTest"
      provisioned-reads = 30
      provisioned-writes = 20
    }
  }
}

LDAP {
  user="test"
  password="test"
  domain="test"

  searchBase = [{organization = "someDomain", domainName = "DC=test,DC=test,DC=com"}, {organization = "anotherDomain", domainName = "DC=test,DC=com"}]

  context {
    initialContextFactory = "com.sun.jndi.ldap.LdapCtxFactory"
    securityAuthentication = "simple"
    providerUrl = "ldaps://somedomain.com:9999"
  }

}

play.filters.enabled += "play.filters.csrf.CSRFFilter"

// Expire session after 10 hours
play.http.session.maxAge = 10h

// session secure should be false in order to run properly locally, this is set properly on deployment
play.http.session.secure = false
play.http.session.httpOnly = true

// MUST be the same as the API!!!
crypto {
  type = "vinyldns.core.crypto.JavaCrypto"
  secret = "8B06A7F3BC8A2497736F1916A123AA40E88217BE9264D8872597EF7A6E5DCE61"
}

http.port=9001

links = [
  {
    displayOnSidebar = true
    displayOnLoginScreen = true
    title = "API Documentation"
    href = "http://vinyldns.io"
    icon = "fa fa-file-text-o"
  }
]

play.modules.enabled += "modules.VinylDNSModule"

// Local.conf has files specific to your environment, for example your own LDAP settings
include "local.conf"
