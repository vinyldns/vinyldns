################################################################################################################
# This configuration is used primarily when running re-start or starting Vinyll locally.  The configuration
# presumes a stand-alone Vinyll server with no backend services.
################################################################################################################
akka {
  loglevel = "ERROR"

  # The following settings are required to have Akka logging output to SLF4J and logback; without
  # these, akka will output to STDOUT
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  logger-startup-timeout = 30s
}

akka.http {
  server {
    # The time period within which the TCP binding process must be completed.
    # Set to `infinite` to disable.
    bind-timeout = 5s

    # Show verbose error messages back to the client
    verbose-error-messages = on
  }

  parsing {
    # Spray doesn't like the AWS4 headers
    illegal-header-warnings = on
  }
}

vinyldns {
  sqs {
    access-key = "x"
    secret-key = "x"
    signing-region = "x"
    service-endpoint = "http://localhost:9324/"
    queue-url = "http://localhost:9324/queue/vinyldns-zones" // this is in the docker/elasticmq/custom.conf file
  }

  sync-delay = 10000 # 10 second delay for resyncing zone

  batch-change-limit = 20 # Max change limit per batch request

  # this key is used in order to encrypt/decrypt DNS TSIG keys.  We use this dummy one for test purposes, this
  # should be overridden with a real value that is hidden for production deployment
  crypto {
    type = "vinyldns.core.crypto.JavaCrypto"
    secret = "8B06A7F3BC8A2497736F1916A123AA40E88217BE9264D8872597EF7A6E5DCE61"
  }

  mysql.repositories {
    zone {
      # no additional settings for now
    },
    batch-change {
      # no additional settings for now
    }
  }

  dynamodb.repositories {
    ## TODO will remove "dynamo" layer when implemeting this fully

    zone-change {
      dynamo {
        tableName = "zoneChanges"
        provisionedReads = 30
        provisionedWrites = 30
      }
    }
    record-set {
      dynamo {
        tableName = "recordSet"
        provisionedReads = 30
        provisionedWrites = 30
      }
    }
    record-change {
      dynamo {
        tableName = "recordChange"
        provisionedReads = 30
        provisionedWrites = 30
      }
    }
    user {
      dynamo {
        tableName = "users"
        provisionedReads = 30
        provisionedWrites = 30
      }
    }
    group {
      dynamo {
        tableName = "groups"
        provisionedReads = 30
        provisionedWrites = 30
      }
    }
    group-change {
      dynamo {
        tableName = "groupChanges"
        provisionedReads = 30
        provisionedWrites = 30
      }
    }
    membership {
      dynamo {
        tableName = "membership"
        provisionedReads = 30
        provisionedWrites = 30
      }
    }
  }
}
