# The default application.conf is not intended to be used in production.  It assumes a docker-compose
# setup for all of the services.  Provide your own application.conf on the docker mount with your
# own settings
vinyldns {

  # Should be provided in the start up script via an environment
  base-version = "unset"
  version = ${vinyldns.base-version} # default to the base version if not overridden
  version = ${?VINYLDNS_VERSION} # override the base version via env var

  queue.settings.service-endpoint = "http://vinyldns-elasticmq:9324/"

  # host and port the server binds to.  This should not be changed
  rest {
    host = "0.0.0.0"
    port = 9000
  }

  # the delay between zone syncs so we are not syncing too often
  sync-delay = 10000

  # crypto settings for symmetric cryptography of secrets in the system
  # Note: for production systems secrets should not live in plain text in a file
  crypto {
    type = "vinyldns.core.crypto.NoOpCrypto"
  }

  data-stores = ["mysql", "dynamodb"]

  # default settings point to the setup from docker compose
  mysql {
    settings {
      name = "vinyldns"
      driver = "org.mariadb.jdbc.Driver"
      migration-url = "jdbc:mariadb://vinyldns-mysql:3306/?user=root&password=pass"
      url = "jdbc:mariadb://vinyldns-mysql:3306/vinyldns?user=root&password=pass"
      user = "root"
      password = "pass"

      # see https://github.com/brettwooldridge/HikariCP
      connection-timeout-millis = 1000
      max-lifetime = 600000
      maximum-pool-size = 20
      register-mbeans = true
    }
    repositories {
      zone {
        # no additional settings for now
      }
      batch-change {
        # no additional settings for now
      }
      user {

      }
      record-set {

      }
    }
  }

  dynamodb {
    # dynamodb settings, for local docker compose the secrets are not needed
    settings {
      key = "x"
      secret = "x"
      endpoint = "http://vinyldns-dynamodb:8000"
    }

    repositories {
      record-change {
        table-name = "recordChange"
        provisioned-reads = 30
        provisioned-writes = 30
      }
      zone-change {
        table-name = "zoneChange"
        provisioned-reads = 30
        provisioned-writes = 30
      }
      group {
        table-name = "groups"
        provisioned-reads = 30
        provisioned-writes = 30
      }
      group-change {
        table-name = "groupChanges"
        provisioned-reads = 30
        provisioned-writes = 30
      }
      membership {
        table-name = "membership"
        provisioned-reads = 30
        provisioned-writes = 30
      }
    }
  }

  # the DDNS connection information for the default dns backend
  defaultZoneConnection {
    name = "vinyldns."
    keyName = "vinyldns."
    key = "nzisn+4G2ldMn0q1CV3vsg=="
    primaryServer = "vinyldns-bind9"
  }

  # the AXFR connection information for the default dns backend
  defaultTransferConnection {
    name = "vinyldns."
    keyName = "vinyldns."
    key = "nzisn+4G2ldMn0q1CV3vsg=="
    primaryServer = "vinyldns-bind9"
  }

  backends = [
    {
      id = "func-test-backend"
      zone-connection {
        name = "vinyldns."
        key-name = "vinyldns."
        key = "nzisn+4G2ldMn0q1CV3vsg=="
        primary-server = "vinyldns-bind9"
      }
      transfer-connection {
        name = "vinyldns."
        key-name = "vinyldns."
        key = "nzisn+4G2ldMn0q1CV3vsg=="
        primary-server = "vinyldns-bind9"
      }
    }
  ]

  # the max number of changes in a single batch change.  Change carefully as this has performance
  # implications
  batch-change-limit = 1000
}

# Akka settings, these should not need to be modified unless you know akka http really well.
akka {
  loglevel = "INFO"
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  logger-startup-timeout = 30s
}

akka.http {
  server {
    # The time period within which the TCP binding process must be completed.
    # Set to `infinite` to disable.
    bind-timeout = 5s

    # Show verbose error messages back to the client
    verbose-error-messages = on
  }

  parsing {
    # akka-http doesn't like the AWS4 headers
    illegal-header-warnings = on
  }
}
