################################################################################################################
# This configuration is only used by docker.  Environment variables are required in order to start
# up a docker cluster appropriately, so most of the values are passed in here.  Defaults assume a local docker compose
# for vinyldns running.
# SQS_ENDPOINT is the SQS endpoint
# SQS_QUEUE_URL is the full URL to the SQS queue
# SQS_REGION is the service region where the SQS queue lives (e.g. us-east-1)
# AWS_ACCESS_KEY is the AWS access key
# AWS_SECRET_ACCESS_KEY is the AWS secret access key
# JDBC_MIGRATION_URL - the URL for migations in the SQL database
# JDBC_URL - the full URL to the SQL database
# JDBC_USER - the SQL database user
# JDBC_PASSWORD - the SQL database password
# DYNAMODB_ENDPOINT - the endpoint for DynamoDB
# DEFAULT_DNS_ADDRESS - the server (and port if not 53) of the default DNS server
# DEFAULT_DNS_KEY_NAME - the default key name used to connect to the default DNS server
# DEFAULT_DNS_KEY_SECRET - the default key secret used to connect to the default DNS server
################################################################################################################
vinyldns {
  sqs {
    embedded = false
    access-key = "x"
    access-key = ${?AWS_ACCESS_KEY}

    secret-key = "x"
    secret-key = ${?AWS_SECRET_ACCESS_KEY}
    signing-region = "x"
    signing-region = ${?SQS_REGION}
    service-endpoint = "http://vinyldns-elasticmq:9324/"
    service-endpoint = ${?SQS_ENDPOINT}
    queue-url = "http://vinyldns-elasticmq:9324/queue/vinyldns"
    queue-url = ${?SQS_QUEUE_URL}
  }

  rest {
    host = "0.0.0.0"
    port = 9000
  }

  sync-delay = 10000

  crypto {
    type = "vinyldns.core.crypto.NoOpCrypto"
  }

  data-stores = ["mysql", "dynamodb"]

  mysql {
    settings {
      # JDBC Settings, these are all values in scalikejdbc-config, not our own
      # these must be overridden to use MYSQL for production use
      # assumes a docker or mysql instance running locally
      name = "vinyldns"
      driver = "org.mariadb.jdbc.Driver"
      url = "jdbc:mariadb://vinyldns-mysql:3306/vinyldns?user=root&password=pass"
      url = ${?JDBC_URL}
      user = "root"
      user = ${?JDBC_USER}
      password = "pass"
      password = ${?JDBC_PASSWORD}
      pool-max-size = 20
      connection-timeout-millis = 1000
      max-life-time = 600000
      migration-settings {
        migration-url = "jdbc:mariadb://vinyldns-mysql:3306/?user=root&password=pass"
        migration-url = ${?JDBC_MIGRATION_URL}
      }
    }
    # Repositories that use this data store are listed here
    repositories {
      zone {
        # no additional settings for now
      },
      batch-change {
        # no additional settings for now
      }
    }
  }

  dynamodb {
    settings {
      # default settings point to the docker compose setup
      key = "x"
      key = ${?AWS_ACCESS_KEY}
      secret = "x"
      secret = ${?AWS_SECRET_ACCESS_KEY}
      endpoint = "http://vinyldns-dynamodb:8000"
      endpoint = ${?DYNAMODB_ENDPOINT}
    }

    repositories {
      zone-change {
        table-name = "zoneChange"
        provisioned-reads = 30
        provisioned-writes = 30
      }

      record-set {
        table-name = "recordSet"
        provisioned-reads = 30
        provisioned-writes = 30
      }

      record-change {
        table-name = "recordChange"
        provisioned-reads = 30
        provisioned-writes = 30
      }

      user {
        table-name = "users"
        provisioned-reads = 30
        provisioned-writes = 30
      }

      group {
        table-name = "groups"
        provisioned-reads = 30
        provisioned-writes = 30
      }

      group-change {
        table-name = "groupChanges"
        provisioned-reads = 30
        provisioned-writes = 30
      }

      membership {
        table-name = "membership"
        provisioned-reads = 30
        provisioned-writes = 30
      }
    }
  }

  defaultZoneConnection {
    name = "vinyldns."
    keyName = "vinyldns."
    keyName = ${?DEFAULT_DNS_KEY_NAME}

    key = "nzisn+4G2ldMn0q1CV3vsg=="
    key = ${?DEFAULT_DNS_KEY_SECRET}

    primaryServer = "vinyldns-bind9"
    primaryServer = ${?DEFAULT_DNS_ADDRESS}
  }

  defaultTransferConnection {
    name = "vinyldns."
    keyName = "vinyldns."
    keyName = ${?DEFAULT_DNS_KEY_NAME}

    key = "nzisn+4G2ldMn0q1CV3vsg=="
    key = ${?DEFAULT_DNS_KEY_SECRET}

    primaryServer = "vinyldns-bind9"
    primaryServer = ${?DEFAULT_DNS_ADDRESS}
  }

  batch-change-limit = 20
}

akka {
  loglevel = "INFO"
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  logger-startup-timeout = 30s

  actor {
    provider = "akka.actor.LocalActorRefProvider"
  }
}

akka.http {
  server {
    # The time period within which the TCP binding process must be completed.
    # Set to `infinite` to disable.
    bind-timeout = 5s

    # Show verbose error messages back to the client
    verbose-error-messages = on
  }

  parsing {
    # Spray doesn't like the AWS4 headers
    illegal-header-warnings = on
  }
}
